[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2025). arcpbf: Process ArcGIS Protocol Buffer FeatureCollections. R package version 0.1.7, https://github.com/R-ArcGIS/arcpbf, https://r.esri.com/arcpbf/.","code":"@Manual{,   title = {arcpbf: Process ArcGIS Protocol Buffer FeatureCollections},   author = {Josiah Parry},   year = {2025},   note = {R package version 0.1.7, https://github.com/R-ArcGIS/arcpbf},   url = {https://r.esri.com/arcpbf/}, }"},{"path":"/index.html","id":"arcpbf","dir":"","previous_headings":"","what":"Process ArcGIS Protocol Buffer FeatureCollections","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"arcpbf R package processes Esri FeatureCollection Protocol Buffers. written Rust powered extendr library. arcpbf functions reading protocol buffer (pbf) results ArcGIS REST API result. pbf results returned f=pbf query. package extremely lightweight fast. Limitation: package support Z M dimensions point.","code":""},{"path":"/index.html","id":"tldr","dir":"","previous_headings":"","what":"TL;DR","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"open_pbf() read FeatureCollection pbf file raw vector read_pbf() read FeatureCollection pbf file process resp_body_pbf() resps_data_pbf() process httr2_response objects FeatureCollection pbf bodies process_pbf() process raw vector list raw vectors set use_sf = TRUE return sf object possible. Applied default read_pbf(), resp_body_pbf() resps_data_pbf(). Developer Note: Rust must installed compile package. Run one line installation instructions https://rustup.rs/. verify Rust installation compatible, run rextendr::rust_sitrep(). ’s .","code":""},{"path":"/index.html","id":"pbf-support","dir":"","previous_headings":"TL;DR","what":"PBF support","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"Note FeatureCollection pbf specification supported arcpbf. want process OSM pbf files use osmextract::oe_read(). , want create read arbitrary protocol buffers directly R, use RprotoBuf.","code":""},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"cases, processing protocol buffer directly http request created {httr2}. can process request responses resp_body_pbf(). Post-processing steps applied default. arguments post_process use_sf TRUE default.","code":"library(arcpbf)  # specify url to sent our request to url <- \"https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/ACS_Population_by_Race_and_Hispanic_Origin_Boundaries/FeatureServer/2/query?where=1=1&outFields=objectid&resultRecordCount=10&f=pbf&token=\" req <- httr2::request(url) resp <- httr2::req_perform(req)  resp #> <httr2_response> #> GET #> https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/ACS_Population_by_Race_and_Hispanic_Origin_Boundaries/FeatureServer/2/query?where=1=1&outFields=objectid&resultRecordCount=10&f=pbf&token= #> Status: 200 OK #> Content-Type: application/x-protobuf #> Body: In memory (60102 bytes) resp_body_pbf(resp) #> Simple feature collection with 10 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17253470 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #>    OBJECTID                       geometry #> 1         1 POLYGON ((-17264972 2244291... #> 2         2 POLYGON ((-17264972 2244291... #> 3         3 POLYGON ((-17264587 2241560... #> 4         4 POLYGON ((-17263053 2239296... #> 5         5 POLYGON ((-17261894 2236947... #> 6         6 POLYGON ((-17262143 2241010... #> 7         7 POLYGON ((-17261575 2233733... #> 8         8 POLYGON ((-17263397 2234419... #> 9         9 POLYGON ((-17269918 2239302... #> 10       10 POLYGON ((-17265323 2239121..."},{"path":"/index.html","id":"multiple-response-objects","dir":"","previous_headings":"Basic usage","what":"Multiple response objects","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"running multiple requests parallel using httr2::req_perform_parallel() responses returned list responses. resps_data_pbf() processes responses vectorized manner.","code":"# create a list of requests reqs <- replicate(5, req, simplify = FALSE) # perform them in parallel resps <- httr2::req_perform_parallel(reqs) #> Iterating ■■■■■■■ 20% | ETA: 7sIterating ■■■■■■■■■■■■■ 40% | ETA: 6sIterating #> ■■■■■■■■■■■■■■■■■■■■■■■■■ 80% | ETA: 1s  # process the responses  resps_data_pbf(resps) #> Simple feature collection with 50 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17253470 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #> First 10 features: #>    OBJECTID                       geometry #> 1         1 POLYGON ((-17264972 2244291... #> 2         2 POLYGON ((-17264972 2244291... #> 3         3 POLYGON ((-17264587 2241560... #> 4         4 POLYGON ((-17263053 2239296... #> 5         5 POLYGON ((-17261894 2236947... #> 6         6 POLYGON ((-17262143 2241010... #> 7         7 POLYGON ((-17261575 2233733... #> 8         8 POLYGON ((-17263397 2234419... #> 9         9 POLYGON ((-17269918 2239302... #> 10       10 POLYGON ((-17265323 2239121..."},{"path":"/index.html","id":"reading-from-a-file","dir":"","previous_headings":"Basic usage","what":"Reading from a file","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"cases may file disk want process pbf . Use read_pbf() . , post-processing steps applied default.","code":"fp <- system.file(\"small-points.pbf\", package = \"arcpbf\") read_pbf(fp) #> Simple feature collection with 2 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17260020 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #>          County                       geometry #> 1 Hawaii County POLYGON ((-17264972 2244291... #> 2 Hawaii County POLYGON ((-17264972 2244291..."},{"path":"/index.html","id":"featurecollection-result-types","dir":"","previous_headings":"","what":"FeatureCollection Result Types","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"three types PBF FeatureCollection responses may returned result Feature Service Query request. default query response type. Contains individual features attributes geometries available. returned returnCountOnly=true API request. Returned scalar integer vector. returned returnIdsOnly=true. data.frame containing object IDs column name set object ID field name feature service.","code":""},{"path":"/index.html","id":"feature-results","dir":"","previous_headings":"FeatureCollection Result Types","what":"Feature Results","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"Feature results can either omit geometry entirely, example case Table query parameter returnGeometry=false, include . geometry omitted entirely, response processed simple data.frame. However, response contain geometry, response bit complex. Unprocessed feature results geometries return named list 3 elements: data.frame fields values named list elements wkt, wkid, latest_wkid, vcs_wkid, latest_vcs_wkid. determine coordinate reference system response well vertical coordinate reference system. sfc object without computed bounding box coordinate reference system set CRS set. post-processing applied geometry Feature Result, CRS set bounding box computed. requires sf package available.","code":"# read an example pbf without post-processing fc_fp <- system.file(\"small-points.pbf\", package = \"arcpbf\") res <- read_pbf(fc_fp, post_process = FALSE)  res #> $attributes #>          County #> 1 Hawaii County #> 2 Hawaii County #>  #> $geometry #> Geometry set for 2 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA #> CRS:           NA #> POLYGON ((-17264972 2244291, -17264988 2244297,... #> POLYGON ((-17264972 2244291, -17264967 2244286,... #>  #> $sr #> $sr$wkt #> [1] NA #>  #> $sr$wkid #> [1] 102100 #>  #> $sr$latest_wkid #> [1] 3857 #>  #> $sr$vcs_wkid #> [1] NA #>  #> $sr$latest_vcs_wkid #> [1] NA post_process_pbf(res) #> Simple feature collection with 2 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17260020 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #>          County                       geometry #> 1 Hawaii County POLYGON ((-17264972 2244291... #> 2 Hawaii County POLYGON ((-17264972 2244291..."},{"path":"/index.html","id":"lower-level-functions","dir":"","previous_headings":"","what":"Lower level functions","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"function open_pbf() read pbf file raw vector can passed process_pbf(). general need function, handy sake example. raw vector can turned R object using process_pbf(). output post processed. Post-processing can applied result process_pbf() using post_process_pbf(). post_process_pbf() can also applied list processed pbf responses.","code":"pbf_raw <- open_pbf(fc_fp) head(pbf_raw, 20) #>  [1] 12 ac fd 01 0a a8 fd 01 0a 08 4f 42 4a 45 43 54 49 44 12 0c res <- process_pbf(pbf_raw) res #> $attributes #>          County #> 1 Hawaii County #> 2 Hawaii County #>  #> $geometry #> Geometry set for 2 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA #> CRS:           NA #> POLYGON ((-17264972 2244291, -17264988 2244297,... #> POLYGON ((-17264972 2244291, -17264967 2244286,... #>  #> $sr #> $sr$wkt #> [1] NA #>  #> $sr$wkid #> [1] 102100 #>  #> $sr$latest_wkid #> [1] 3857 #>  #> $sr$vcs_wkid #> [1] NA #>  #> $sr$latest_vcs_wkid #> [1] NA post_process_pbf(res) #> Simple feature collection with 2 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17260020 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #>          County                       geometry #> 1 Hawaii County POLYGON ((-17264972 2244291... #> 2 Hawaii County POLYGON ((-17264972 2244291... multi_res <- list(res, res, res)  post_process_pbf(multi_res) #> Simple feature collection with 6 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17260020 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #>          County                       geometry #> 1 Hawaii County POLYGON ((-17264972 2244291... #> 2 Hawaii County POLYGON ((-17264972 2244291... #> 3 Hawaii County POLYGON ((-17264972 2244291... #> 4 Hawaii County POLYGON ((-17264972 2244291... #> 5 Hawaii County POLYGON ((-17264972 2244291... #> 6 Hawaii County POLYGON ((-17264972 2244291..."},{"path":"/index.html","id":"benchmarking","dir":"","previous_headings":"","what":"Benchmarking","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"bench mark compares processing pbfs current approach processing raw json arcgislayers arcgisutils. recreates example README arcgislayers.","code":"jsn <- function() {   json_reqs <- c(     \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0/query?outFields=%2A&where=1%3D1&outSR=%7B%22wkid%22%3A4326%7D&returnGeometry=TRUE&token=&f=json&resultOffset=0\",     \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0/query?outFields=%2A&where=1%3D1&outSR=%7B%22wkid%22%3A4326%7D&returnGeometry=TRUE&token=&f=json&resultOffset=2001\"   )   reqs <- lapply(json_reqs, httr2::request)       resps <- httr2::req_perform_parallel(reqs) |>      lapply(function(x) arcgisutils::parse_esri_json(httr2::resp_body_string(x)))       do.call(rbind.data.frame, resps) |>      sf::st_as_sf() }  # protobuff processing  pbf <- function() {      pbf_reqs <- c(     \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0/query?outFields=%2A&where=1%3D1&outSR=%7B%22wkid%22%3A4326%7D&returnGeometry=TRUE&token=&f=pbf&resultOffset=0\",     \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized_Boundaries/FeatureServer/0/query?outFields=%2A&where=1%3D1&outSR=%7B%22wkid%22%3A4326%7D&returnGeometry=TRUE&token=&f=pbf&resultOffset=2001\"   )      reqs <- lapply(pbf_reqs, httr2::request)      httr2::req_perform_parallel(reqs) |>      resps_data_pbf() }  bench::mark(   jsn(),   pbf(),   check = FALSE,   relative = TRUE,   iterations = 5 ) #> Iterating ■■■■■■■■■■■■■■■■                  50% | ETA:  1s                                                           Iterating ■■■■■■■■■■■■■■■■                  50% | ETA:  1s #> Iterating ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s #> Warning: Some expressions had a GC in every iteration; so filtering is #> disabled. #> # A tibble: 2 × 6 #>   expression   min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <dbl>  <dbl>     <dbl>     <dbl>    <dbl> #> 1 jsn()       3.06   3.27      1         3.94     1.39 #> 2 pbf()       1      1         3.94      1        1"},{"path":"/index.html","id":"internals","dir":"","previous_headings":"","what":"Internals","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"Internally, rust crate esripbf Rust library built prost handle FeatureCollection Protocol Buffer Specification.","code":""},{"path":"/index.html","id":"future-notes","dir":"","previous_headings":"","what":"Future Notes","title":"Process ArcGIS Protocol Buffer FeatureCollections","text":"Alternatively, may make sense write geoarrow array convert sfc using {wk}. just thoughts.","code":""},{"path":"/reference/httr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract PBFs from httr2_response objects — resp_body_pbf","title":"Extract PBFs from httr2_response objects — resp_body_pbf","text":"Processes httr2_response objects return FeatureCollection PBFs.","code":""},{"path":"/reference/httr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract PBFs from httr2_response objects — resp_body_pbf","text":"","code":"resp_body_pbf(resp, post_process = TRUE, use_sf = TRUE)  resps_data_pbf(resps, post_process = TRUE, use_sf = TRUE)"},{"path":"/reference/httr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract PBFs from httr2_response objects — resp_body_pbf","text":"resp httr2 response object, created req_perform(). post_process default TRUE. Apply post_process_pbf() pbf body. use_sf default TRUE. Whether return sf object. resps list httr2_response objects created httr2::req_perform_parallel()","code":""},{"path":"/reference/httr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract PBFs from httr2_response objects — resp_body_pbf","text":"processed FeatureCollection pbf. Either scalar integer, named list, data.frame, sf object post-processing applied.","code":""},{"path":"/reference/httr2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract PBFs from httr2_response objects — resp_body_pbf","text":"Responses type application/x-protobuf automatically processed using process_pbf() optional post-processing applied. Theses functions assume body responses Esri FeatureCollection protocol buffer.","code":""},{"path":"/reference/httr2.html","id":"lists-of-responses","dir":"Reference","previous_headings":"","what":"Lists of responses","title":"Extract PBFs from httr2_response objects — resp_body_pbf","text":"running multiple requests parallel using httr2::req_perform_parallel() responses returned list responses. resps_data_pbf() processes responses vectorized manner. Results post-processed default return sf objects applicable. may desirable heterogeneous response types expected. example, one list element contains count result another contains object ID result. See post_process_pbf() details. Note: Knowledge Graph protocol buffers protobuf formats supported result error used functions.","code":""},{"path":"/reference/httr2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract PBFs from httr2_response objects — resp_body_pbf","text":"","code":"if (rlang::is_installed(c(\"httr2\", \"sf\")) && interactive()) {   base_url <- file.path(     \"https://services.arcgis.com/P3ePLMYs2RVChkJx\",     \"arcgis\", \"rest\", \"services\",     \"ACS_Population_by_Race_and_Hispanic_Origin_Boundaries\",     \"FeatureServer\", \"2\", \"query\",     fsep = \"/\"   )    # create the base request   req <- httr2::request(base_url)    # fill query parameters   req <- httr2::req_url_query(     req,     where = \"1=1\",     outFeilds = \"objectid\",     resultRecordCount = 1,     f = \"pbf\"   )    # make the request   resp <- httr2::req_perform(req)    # parse the request   resp_body_pbf(resp)    # simulate response from multi_req_perform   resps <- list(resp, resp, resp)    # process them all at once   resps_data_pbf(resps) }"},{"path":"/reference/open_pbf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a pbf file as a raw vector — open_pbf","title":"Read a pbf file as a raw vector — open_pbf","text":"Read pbf file raw vector","code":""},{"path":"/reference/open_pbf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a pbf file as a raw vector — open_pbf","text":"","code":"open_pbf(path)"},{"path":"/reference/open_pbf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a pbf file as a raw vector — open_pbf","text":"path path .pbf file.","code":""},{"path":"/reference/open_pbf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a pbf file as a raw vector — open_pbf","text":"raw vector","code":""},{"path":"/reference/open_pbf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a pbf file as a raw vector — open_pbf","text":"","code":"count_fp <- system.file(\"count.pbf\", package = \"arcpbf\") oid_fp <- system.file(\"ids.pbf\", package = \"arcpbf\") tbl_fp <- system.file(\"small-table.pbf\", package = \"arcpbf\") fc_fp <- system.file(\"small-points.pbf\", package = \"arcpbf\") count_raw <- open_pbf(count_fp) oid_raw <- open_pbf(oid_fp) tbl_raw <- open_pbf(tbl_fp) fc_raw <- open_pbf(fc_fp)"},{"path":"/reference/post_process_pbf.html","id":null,"dir":"Reference","previous_headings":"","what":"Post process pbf results — post_process_pbf","title":"Post process pbf results — post_process_pbf","text":"Applies post-processing results process_pbf()","code":""},{"path":"/reference/post_process_pbf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post process pbf results — post_process_pbf","text":"","code":"post_process_pbf(x, use_sf = TRUE)"},{"path":"/reference/post_process_pbf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post process pbf results — post_process_pbf","text":"x object returned process_pbf() read_pbf() use_sf default TRUE. Whether return sf object.","code":""},{"path":"/reference/post_process_pbf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post process pbf results — post_process_pbf","text":"object class data.frame, sf, scalar integer vector. See process_pbf() details.","code":""},{"path":"/reference/post_process_pbf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Post process pbf results — post_process_pbf","text":"x list object, results row-binded. appropriate element list data.frame feature result geometry. However, element , post-processing error. certain elements post processing , post-process list element independently.","code":""},{"path":"/reference/post_process_pbf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post process pbf results — post_process_pbf","text":"","code":"tbl_fp <- system.file(\"small-table.pbf\", package = \"arcpbf\") fc_fp <- system.file(\"small-points.pbf\", package = \"arcpbf\")  # table feature collection fc <- read_pbf(tbl_fp) head(post_process_pbf(fc)) #>   OBJECTID       Adoption_Service_Provider  DBA       city                state #> 1        1 A Family in Bloom Adoption, LLC <NA>    Boulder             Colorado #> 2        2     A Love Beyond Borders, Inc. <NA>     Denver             Colorado #> 3        3                  Adopolis, Inc. <NA> Washington District of Columbia #>    Accreditation_or_Approval_Statu Accredited_Approvedto_Provide #> 1 Accredited/Approved – In Process         Incoming and Outgoing #> 2                         Approved                      Incoming #> 3                       Accredited                      Incoming #>                                           full_address #> 1           Adoption Service Provider,Boulder,Colorado #> 2      A Family in Bloom Adoption, LLC,Denver,Colorado #> 3 A Love Beyond Borders, Inc.,Washington,Washington DC  # feature collection with geometry fc <- read_pbf(fc_fp) head(post_process_pbf(fc)) #> Simple feature collection with 2 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17260020 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #>          County                       geometry #> 1 Hawaii County POLYGON ((-17264972 2244291... #> 2 Hawaii County POLYGON ((-17264972 2244291..."},{"path":"/reference/process_pbf.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a FeatureCollection PBF — process_pbf","title":"Process a FeatureCollection PBF — process_pbf","text":"Process pbf raw vector list raw vectors.","code":""},{"path":"/reference/process_pbf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a FeatureCollection PBF — process_pbf","text":"","code":"process_pbf(proto)"},{"path":"/reference/process_pbf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a FeatureCollection PBF — process_pbf","text":"proto either raw vector list raw vectors containing FeatureCollection pbf","code":""},{"path":"/reference/process_pbf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a FeatureCollection PBF — process_pbf","text":"count results, scalar integer. object ID results data.frame one column. pbfs contain geometries, list 3 elements: attributes data.frame fields FeatureCollection geometry sfc object without computed bounding box coordinate reference system set sr named list spatial reference feature collection Important: Use post_process_pbf() convert sf object computed bounding box CRS.","code":""},{"path":"/reference/process_pbf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process a FeatureCollection PBF — process_pbf","text":"three types PBF FeatureCollection responses may returned.","code":""},{"path":"/reference/process_pbf.html","id":"feature-result","dir":"Reference","previous_headings":"","what":"Feature Result","title":"Process a FeatureCollection PBF — process_pbf","text":"case PBF FeatureResult use_sf = FALSE, data.frame returned spatial reference stored crs attribute. Otherwise sf object returned.","code":""},{"path":"/reference/process_pbf.html","id":"count-result","dir":"Reference","previous_headings":"","what":"Count Result","title":"Process a FeatureCollection PBF — process_pbf","text":"PBF can also return count result, example query parameter returnCountOnly set true. case, scalar integer vector returned.","code":""},{"path":"/reference/process_pbf.html","id":"object-id-result","dir":"Reference","previous_headings":"","what":"Object ID Result","title":"Process a FeatureCollection PBF — process_pbf","text":"case query parameter returnIdsOnly true, data.frame returned containing object IDs column name set object ID field name feature service.","code":""},{"path":"/reference/process_pbf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a FeatureCollection PBF — process_pbf","text":"","code":"count_fp <- system.file(\"count.pbf\", package = \"arcpbf\") oid_fp <- system.file(\"ids.pbf\", package = \"arcpbf\") tbl_fp <- system.file(\"small-table.pbf\", package = \"arcpbf\") fc_fp <- system.file(\"small-points.pbf\", package = \"arcpbf\")  # count response count_raw <- open_pbf(count_fp) process_pbf(count_raw) #> [1] 3143  # object id response oid_raw <- open_pbf(oid_fp) head(process_pbf(oid_raw)) #>   OBJECTID #> 1        1 #> 2        2 #> 3        3  # table feature collection tbl_raw <- open_pbf(tbl_fp) process_pbf(tbl_raw) #>   OBJECTID       Adoption_Service_Provider  DBA       city                state #> 1        1 A Family in Bloom Adoption, LLC <NA>    Boulder             Colorado #> 2        2     A Love Beyond Borders, Inc. <NA>     Denver             Colorado #> 3        3                  Adopolis, Inc. <NA> Washington District of Columbia #>    Accreditation_or_Approval_Statu Accredited_Approvedto_Provide #> 1 Accredited/Approved – In Process         Incoming and Outgoing #> 2                         Approved                      Incoming #> 3                       Accredited                      Incoming #>                                           full_address #> 1           Adoption Service Provider,Boulder,Colorado #> 2      A Family in Bloom Adoption, LLC,Denver,Colorado #> 3 A Love Beyond Borders, Inc.,Washington,Washington DC  # feature collection with geometry fc_raw <- open_pbf(fc_fp) process_pbf(fc_raw) #> $attributes #>          County #> 1 Hawaii County #> 2 Hawaii County #>  #> $geometry #> Geometry set for 2 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA #> CRS:           NA #> POLYGON ((-17264972 2244291, -17264988 2244297,... #> POLYGON ((-17264972 2244291, -17264967 2244286,... #>  #> $sr #> $sr$wkt #> [1] NA #>  #> $sr$wkid #> [1] 102100 #>  #> $sr$latest_wkid #> [1] 3857 #>  #> $sr$vcs_wkid #> [1] NA #>  #> $sr$latest_vcs_wkid #> [1] NA #>  #>"},{"path":"/reference/read_pbf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a FeatureCollection Protocol Buffer — read_pbf","title":"Read a FeatureCollection Protocol Buffer — read_pbf","text":"Given binary file containing FeatureCollection protocol buffer (pbf), read contents R R object.","code":""},{"path":"/reference/read_pbf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a FeatureCollection Protocol Buffer — read_pbf","text":"","code":"read_pbf(path, post_process = TRUE, use_sf = TRUE)"},{"path":"/reference/read_pbf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a FeatureCollection Protocol Buffer — read_pbf","text":"path scalar character path pbf file post_process default TRUE. Apply post_process_pbf() pbf body. use_sf default TRUE. Whether return sf object.","code":""},{"path":"/reference/read_pbf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a FeatureCollection Protocol Buffer — read_pbf","text":"Either data.frame, list, scalar integer, sf object post_process = TRUE use_sf = TRUE. See process_pbf() .","code":""},{"path":"/reference/read_pbf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a FeatureCollection Protocol Buffer — read_pbf","text":"","code":"count_fp <- system.file(\"count.pbf\", package = \"arcpbf\") oid_fp <- system.file(\"ids.pbf\", package = \"arcpbf\") tbl_fp <- system.file(\"small-table.pbf\", package = \"arcpbf\") fc_fp <- system.file(\"small-points.pbf\", package = \"arcpbf\")  # count response read_pbf(count_fp) #> [1] 3143  # object id response head(read_pbf(oid_fp)) #>   OBJECTID #> 1        1 #> 2        2 #> 3        3  # table feature collection read_pbf(tbl_fp) #>   OBJECTID       Adoption_Service_Provider  DBA       city                state #> 1        1 A Family in Bloom Adoption, LLC <NA>    Boulder             Colorado #> 2        2     A Love Beyond Borders, Inc. <NA>     Denver             Colorado #> 3        3                  Adopolis, Inc. <NA> Washington District of Columbia #>    Accreditation_or_Approval_Statu Accredited_Approvedto_Provide #> 1 Accredited/Approved – In Process         Incoming and Outgoing #> 2                         Approved                      Incoming #> 3                       Accredited                      Incoming #>                                           full_address #> 1           Adoption Service Provider,Boulder,Colorado #> 2      A Family in Bloom Adoption, LLC,Denver,Colorado #> 3 A Love Beyond Borders, Inc.,Washington,Washington DC  # feature collection with geometry read_pbf(fc_fp) #> Simple feature collection with 2 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -17298700 ymin: 2216212 xmax: -17260020 ymax: 2261306 #> Projected CRS: WGS 84 / Pseudo-Mercator #>          County                       geometry #> 1 Hawaii County POLYGON ((-17264972 2244291... #> 2 Hawaii County POLYGON ((-17264972 2244291..."},{"path":"/news/index.html","id":"arcpbf-017","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.7","title":"arcpbf 0.1.7","text":"Handles missing CRS closes https://github.com/R-ArcGIS/arcpbf/issues/11 h/t @elipousson reporting Returns warning message esriFieldBlob encountered https://github.com/R-ArcGIS/arcpbf/issues/6 Fixes bug error occured query returned rows https://github.com/R-ArcGIS/arcpbf/issues/8","code":""},{"path":"/news/index.html","id":"arcpbf-016","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.6","title":"arcpbf 0.1.6","text":"CRAN release: 2024-10-01 Adds tests/ .Rbuildignore pass CRAN checks","code":""},{"path":"/news/index.html","id":"arcpbf-015","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.5","title":"arcpbf 0.1.5","text":"CRAN release: 2024-09-17 Addresses CRAN removal failing compile Fedora.","code":""},{"path":"/news/index.html","id":"arcpbf-014","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.4","title":"arcpbf 0.1.4","text":"CRAN release: 2024-08-01 Addresses MSRV requirement replacing std::cell::OnceCell once_cell::sync::OnceCell Fix parsing dates small integers Add minimal integration tests arcgislayers","code":""},{"path":"/news/index.html","id":"arcpbf-013","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.3","title":"arcpbf 0.1.3","text":"CRAN release: 2024-07-10 Closes https://github.com/R-ArcGIS/arcpbf/issues/2 Closes https://github.com/R-ArcGIS/arcpbf/issues/1","code":""},{"path":"/news/index.html","id":"arcpbf-012","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.2","title":"arcpbf 0.1.2","text":"CRAN release: 2024-07-05 Bump version extendr-api 0.7.0 avoid r-devel warnings","code":""},{"path":"/news/index.html","id":"arcpbf-011","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.1","title":"arcpbf 0.1.1","text":"Fixes bug sfg class assigned empty geometries. multi_resp_body_pbf() becomes resps_data_pbf() inline httr2 release Fixes bug processing list protocol buffers contain tables","code":""},{"path":"/news/index.html","id":"arcpbf-010","dir":"Changelog","previous_headings":"","what":"arcpbf 0.1.0","title":"arcpbf 0.1.0","text":"CRAN release: 2023-11-09 Initial CRAN submission.","code":""}]
